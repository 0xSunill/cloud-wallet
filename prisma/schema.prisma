
generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  role      Role
  createdAt DateTime @default(now())

  student Student?
  teacher Teacher?
  wallet  Wallet?

  // Invoices where user is the student (payer)
  // invoices  Invoice[] @relation("StudentInvoices")

  // Invoices where user is the merchant (receiver)
  merchantInvoices Invoice[] @relation("MerchantInvoices")
}

model Student {
  id         String  @id
  rollNo     String  @unique
  department String?
  year       Int?
  section    String?

  user        User         @relation(fields: [id], references: [id])
  enrollments Enrollment[]
  attendance  Attendance[]
  grades      Grade[]
  invoices    Invoice[]
}

model Teacher {
  id         String  @id
  department String?

  user          User            @relation(fields: [id], references: [id])
  classSchedule ClassSchedule[]
}

model Course {
  id         String  @id @default(uuid())
  code       String  @unique
  name       String
  department String?
  credits    Int?

  schedule    ClassSchedule[]
  enrollments Enrollment[]
  grades      Grade[]
  attendance  Attendance[]
}

model ClassSchedule {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime
  room      String?
}

model Enrollment {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  @@unique([studentId, courseId])
}

model Attendance {
  id        String           @id @default(uuid())
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  course    Course           @relation(fields: [courseId], references: [id])
  courseId  String
  date      DateTime
  status    AttendanceStatus

  @@unique([studentId, courseId, date])
}

model Grade {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String
  term      String
  marks     Float

  @@unique([studentId, courseId, term])
}

model CalendarEvent {
  id          String    @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  eventType   EventType @default(other)
}

model Wallet {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique // ✅ one user → one wallet
  chain    String
  address  String @unique
  currency String @default("USDC")

  ledgerEntries LedgerEntry[]
}

model LedgerEntry {
  id        String    @id @default(uuid())
  wallet    Wallet    @relation(fields: [walletId], references: [id])
  walletId  String
  direction Direction
  amount    BigInt
  reason    String?
  refType   String?
  refId     String?
  txHash    String?
  createdAt DateTime  @default(now())
}

model Invoice {
  id String @id @default(uuid())

  // Student who pays
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  // Merchant who receives
  merchant   User   @relation("MerchantInvoices", fields: [merchantId], references: [id])
  merchantId String

  amount    BigInt
  currency  String        @default("USDC")
  status    InvoiceStatus @default(pending)
  dueDate   DateTime?
  createdAt DateTime      @default(now())
}

enum Role {
  student
  teacher
  admin
  merchant
}

enum AttendanceStatus {
  present
  absent
  late
}

enum EventType {
  holiday
  exam
  seminar
  other
}

enum Direction {
  credit
  debit
}

enum InvoiceStatus {
  pending
  paid
  expired
  refunded
}
